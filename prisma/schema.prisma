datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  name      String
  username  String?   @unique
  email     String   @unique
  avatarUrl String?
  githubId  String?  @unique
  discordId String?  @unique
  googleId  String?  @unique
  twitterId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  reviews  Review[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Applicant {
  id         String       @id @default(cuid())
  name       String
  username   String       @unique
  headline   String?
  location   String?
  pictureUrl String?
  summary    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  experiences Experience[]
  educations  Education[]
  skills      Skill[]
  reviews     Review[]
}

model Experience {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String?
  tenure      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicantId String
}

model Education {
  id           String   @id @default(cuid())
  school       String
  degree       String?
  fieldOfStudy String?
  startDate    String?
  endDate      String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicantId String
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicantId String
}

model Review {
  id        String   @id @default(cuid())
  content      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicantId String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}